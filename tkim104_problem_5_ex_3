{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOmxjt4fSWbJKd+4EFomI29"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Problem 5: Matrix factorization\n","The above procedure is common in many labs, however can cause errors due to the dependency on the summary image and the multiple stages of processing. Matrix factorization has emerged as an alternative approach for identifying ROIs from the full spatio-temporal video. Here we will explore three different types of factorization and compare the results using a table.\n","\n","##Part C:\n","Now try ICA for the same pixels-by-time matrix as in part A (for a specific number of components you find reasonable). What are the differences that you note?"],"metadata":{"id":"vGcG6PgKZ36N"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"o7nCTTUbfhBb","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1yuxJX0TUJLk6s6usXpkqfL3f1-nc5kN-"},"executionInfo":{"status":"ok","timestamp":1713999538349,"user_tz":240,"elapsed":102906,"user":{"displayName":"Armone Steel","userId":"04663235238195431645"}},"outputId":"53375f47-3dfd-4dec-f3e0-e12b704cdb20"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["import plotly\n","import plotly.graph_objects as go\n","import matplotlib.pyplot as plt\n","import tifffile\n","from google.colab import drive\n","from PIL import Image\n","import numpy as np\n","import sklearn\n","from sklearn import cluster, decomposition\n","\n","# Find the tif file in google drive\n","drive.mount('/content/drive')\n","file = \"/content/drive/MyDrive/Neural_Signals_and_Computation_HW1/TEST_MOVIE_00001-small.tif\"\n","\n","# Load tif file into numpy array and image\n","data = tifffile.imread(file)\n","\n","# Vectorize each frame into a column vector thenc combine each column together\n","# Matrix -> (500*500, 500) or (MN, T)\n","full_data = []\n","for k in range(len(data)):\n","  column = np.array(data[k]).flatten()\n","  full_data.append(column)\n","full_data = np.array(full_data).transpose()\n","\n","# Create a square layout for the plot\n","layout = go.Layout(\n","    width=data.shape[1],  # Set the width of the plot\n","    height=data.shape[2],  # Set the height of the plot\n","    xaxis=dict(range=[0, data.shape[1]]),  # Set the x-axis range to match the width of the image\n","    yaxis=dict(range=[0, data.shape[2]]),  # Set the y-axis range to match the height of the image\n","    margin=dict(l=0, r=0, t=0, b=0),  # Set the margins to 0 to remove unnecessary spacing\n",")\n","\n","# Check when we choose number of components k = 5\n","for i in range(1):\n","  n_components = i + 5\n","\n","  ica_estimator = decomposition.FastICA(\n","    n_components=n_components, max_iter=400, whiten=\"arbitrary-variance\", tol=15e-5\n","  )\n","  ica_result_mn = ica_estimator.fit_transform(full_data)\n","  ica_result_f = ica_estimator.components_\n","\n","  result = np.matmul(ica_result_mn, ica_result_f)\n","\n","  ica_data = []\n","  for j in range(result.shape[1]):\n","    ica_data.append(result[:, j].reshape((500, 500)))\n","  ica_data = np.array(ica_data)\n","\n","  # Plot the summary images\n","  print(\"Using \" + str(i + 5) + \" components: \")\n","  fig_mean = go.Figure(data=go.Heatmap(z=ica_data[0]), layout=layout)\n","  fig_mean.show()\n","\n","# Original Data Image Frame 0\n","print(\"Original Data\")\n","fig_mean = go.Figure(data=go.Heatmap(z=data[0]), layout=layout)\n","fig_mean.show()"]},{"cell_type":"markdown","source":["Compared to PCA and NMF, it appears that ICA factorized the data in the opposite direction where most of the background in the image has what seems to be a higher value than the regions of interest / cells. Some similarities are present, but the most prominent differences in the heat map in darker and brighter areas of flouresence show a clearer distinction of certain regions than PCA and NMF. At the same time, like PCA, it appears ICA allows negative numbers as well compared to the original image and NMF that does not use negatives."],"metadata":{"id":"Ir_yBHcTUVl9"}}]}