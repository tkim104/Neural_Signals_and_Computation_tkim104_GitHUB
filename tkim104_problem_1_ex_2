{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOo8hCxxVcCI3QLOanw/fKX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Problem 1: Motion correction.\n","Load up the calcium image video in the file: TEST MOVIE 00001-small-motion.tif. This file represents the raw fluorescence video in TIF format, common for calcium imaging.\n","\n","## Part B\n","Pick two frames that seem to be particularly offset from each other. Compute their correlation, and repeat for different shifts in space. Where is the correlation peak?"],"metadata":{"id":"RO4HweLuTwhA"}},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jGxKErNaQZdS","executionInfo":{"status":"ok","timestamp":1713750289638,"user_tz":240,"elapsed":5752,"user":{"displayName":"Armone Steel","userId":"04663235238195431645"}},"outputId":"c31a5c4d-6a1e-4d18-b784-ac241e21b2bd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Original Correlation Coefficient: 0.34156387475104966\n","Max shift: (3, 0) acquired: 0.34156387475104966\n"]}],"source":["import plotly\n","import plotly.graph_objects as go\n","import tifffile\n","from google.colab import drive\n","from PIL import Image\n","import numpy as np\n","\n","def shift_image(image, shift_x, shift_y):\n","    shifted_image = np.roll(image, shift_x, axis=1)\n","    shifted_image = np.roll(shifted_image, shift_y, axis=0)\n","    return shifted_image\n","\n","# Find the tif file in google drive\n","drive.mount('/content/drive')\n","file = \"/content/drive/MyDrive/Neural_Signals_and_Computation_HW1/TEST_MOVIE_00001-small-motion.tif\"\n","\n","# Load tif file into numpy array and image\n","data = tifffile.imread(file)\n","\n","# Frames to correlate\n","frame_id_1 = 145\n","frame_id_2 = 358\n","\n","frame_1 = np.array(data[frame_id_1])\n","frame_2 = np.array(data[frame_id_2])\n","\n","# Get Correlation Coefficient\n","correlation = np.corrcoef(frame_1, frame_2)\n","mean_corr = np.mean(correlation)\n","\n","# Check Different Shifts in Space\n","max_shift = 10\n","shift_range = range(-max_shift, max_shift + 1)\n","\n","# Initialize lists to store correlation values and corresponding shifts\n","correlation_values = []\n","shifts = []\n","\n","# Iterate over different shifts\n","for shift_x in shift_range:\n","    for shift_y in shift_range:\n","        # Shift frame2\n","        shifted_frame2 = shift_image(frame_2, shift_x, shift_y)\n","\n","        # Compute correlation between shifted frames\n","        correlation = np.corrcoef(frame_1.flatten(), shifted_frame2.flatten())[0, 1]\n","\n","        # Store correlation value and corresponding shift\n","        correlation_values.append(correlation)\n","        shifts.append((shift_x, shift_y))\n","print(\"Original Correlation Coefficient: \" + str(correlation))\n","max_val = 0\n","shift_elems = None\n","\n","# Find the shift that causes the greatest correlation peak\n","for i in range(len(correlation_values)):\n","    if max_val < correlation_values[i]:\n","        max_val = correlation_values[i]\n","        shift_elems = shifts[i]\n","print(\"Max shift: \" + str(shift_elems) + \" acquired: \" + str(correlation_values[i]))"]}]}