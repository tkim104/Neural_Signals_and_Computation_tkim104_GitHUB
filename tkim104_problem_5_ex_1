{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNWKrI+++C4sznTAXPVVDvb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Start with one point, apply convolution with some kernel to find high value on the pixel\n","\n","Check PCA documentation, get components then coefficients\n","\n","[MN, T] -> [MN, components] X [components, T]\n","\n","When we get fit transform could track pixel or time trace, keep track pixel and reduce time points\n","One option is PCA on data or data transpose, check dimension of results include number of pixels rather than the number of frames\n","[500, 491, 491]\n","data[0] = [491, 491]\n","\n","PCA should be [491 * 491] if it is [500] it was time"],"metadata":{"id":"8KOLHljCaIgX"}},{"cell_type":"markdown","source":["#Problem 5: Matrix factorization\n","The above procedure is common in many labs, however can cause errors due to the dependency on the summary image and the multiple stages of processing. Matrix factorization has emerged as an alternative approach for identifying ROIs from the full spatio-temporal video. Here we will explore three different types of factorization and compare the results using a table.\n","\n","## Part A:\n","Run PCA on the pixels-by-time matrix obtained by vectorizing each frame into a column vector. How does the result change with the number of principal components you choose?"],"metadata":{"id":"4SPLJ2qWZYjA"}},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Su69MBrzBLlNRxFSSLKKdM2Utp1w1rj0"},"id":"FeGtIt2aZNH9","executionInfo":{"status":"ok","timestamp":1713979948712,"user_tz":240,"elapsed":87346,"user":{"displayName":"Armone Steel","userId":"04663235238195431645"}},"outputId":"f69bebea-b9c9-48c7-a134-64806e529d73"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["import plotly\n","import plotly.graph_objects as go\n","import matplotlib.pyplot as plt\n","import tifffile\n","from google.colab import drive\n","from PIL import Image\n","import numpy as np\n","import sklearn\n","from sklearn import cluster, decomposition\n","\n","# Find the tif file in google drive\n","drive.mount('/content/drive')\n","file = \"/content/drive/MyDrive/Neural_Signals_and_Computation_HW1/TEST_MOVIE_00001-small.tif\"\n","\n","# Load tif file into numpy array and image\n","data = tifffile.imread(file)\n","\n","# Vectorize each frame into a column vector thenc combine each column together\n","# Matrix -> (500*500, 500) or (MN, T)\n","full_data = []\n","for k in range(len(data)):\n","  column = np.array(data[k]).flatten()\n","  full_data.append(column)\n","full_data = np.array(full_data).transpose()\n","\n","# Create a square layout for the plot\n","layout = go.Layout(\n","    width=data.shape[1],  # Set the width of the plot\n","    height=data.shape[2],  # Set the height of the plot\n","    xaxis=dict(range=[0, data.shape[1]]),  # Set the x-axis range to match the width of the image\n","    yaxis=dict(range=[0, data.shape[2]]),  # Set the y-axis range to match the height of the image\n","    margin=dict(l=0, r=0, t=0, b=0),  # Set the margins to 0 to remove unnecessary spacing\n",")\n","\n","# Check when we choose number of components k = 2 to 7\n","for i in range(5):\n","  n_components = i + 2\n","  pca_estimator = decomposition.PCA(\n","    n_components=n_components, svd_solver=\"randomized\", whiten=True\n","  )\n","  pca_result_mn = pca_estimator.fit_transform(full_data)\n","  pca_result_f = pca_estimator.components_\n","\n","  result = np.matmul(pca_result_mn, pca_result_f)\n","\n","  pca_data = []\n","  for j in range(result.shape[1]):\n","    pca_data.append(result[:, j].reshape((500, 500)))\n","  pca_data = np.array(pca_data)\n","\n","  # Plot the summary images\n","  print(\"Using \" + str(i + 2) + \" components: \")\n","  fig_mean = go.Figure(data=go.Heatmap(z=pca_data[0]), layout=layout)\n","  fig_mean.show()\n","\n","# Original Data Image Frame 0\n","print(\"Original Data\")\n","fig_mean = go.Figure(data=go.Heatmap(z=data[0]), layout=layout)\n","fig_mean.show()"]},{"cell_type":"markdown","source":["Using PCA involves reducing the dimension of the image per frame to however many components we wish to analyze that covers as much variance of the data. As we increase the number of components, we reduce the degree of dimension reduction we do, thus somewhat turning the image more into what we originally started with. With very low number of components, it is unable to capture all the variance and detail in the original as much as higher components can."],"metadata":{"id":"NdrPpy5EQFoi"}}]}